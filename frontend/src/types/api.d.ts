/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_register_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_Login_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reset/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PasswordResetController_forgotPassword_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reset/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PasswordResetController_resetPassword_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getProfile_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserController_updateProfile_v1"];
        trace?: never;
    };
    "/v1/users/profile/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserController_changePassword_v1"];
        trace?: never;
    };
    "/v1/authors/info/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthorController_getAuthorInfo_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostController_create_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/authorPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PostController_getPostsByAuthor_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/softDelete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["PostController_softDelete_v1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["PostController_update_v1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/postUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PostController_getAllPosts_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/posts/postUserDetail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PostController_getPostDetail_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CategoryController_getAllCategories_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tags/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TagController_getAllTags_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/listAuthor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AdminController_getPendingAuthors_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/{id}/approvalAuthor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["AdminController_updateApproval_v1"];
        trace?: never;
    };
    "/v1/admin/approvalPost/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["AdminController_approvePost_v1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/allAuthor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AdminController_getAllListAuthors_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/listPost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AdminController_getAllPosts_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/followers/follow/{authorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["FollowersController_follow_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/followers/unfollow/{authorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["FollowersController_unfollow_v1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/followers/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FollowersController_getFollowedAuthors_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ResponseData: {
            data: Record<string, never>;
            statusCode: number;
            message: string;
            error: Record<string, never>;
        };
        AuthorSerializer: {
            id: number;
            penName: string;
            bio: string;
            avatarUrl: string;
        };
        UserSerializer: {
            id: number;
            username: string;
            fullName: string;
            email: string;
            avatarUrl: string;
            role: string;
            author: components["schemas"]["AuthorSerializer"];
        };
        RegisterDto: {
            /**
             * @description Tên đăng nhập của người dùng (không được trùng)
             * @example tohoai123
             */
            username: string;
            /**
             * @description Họ và tên đầy đủ của người dùng.
             * @example Tô Hoài
             */
            fullName: string;
            /** @example tohoai@gmail.com */
            email: string;
            /**
             * @description Mật khẩu có ít nhất 6 ký tự.
             * @example tohoai321
             */
            password: string;
            /**
             * @description Vai trò của người dùng (ví dụ: ADMIN, AUTHOR, USER).
             * @example user
             * @enum {string}
             */
            role: "admin" | "author" | "user";
            /**
             * @description Bút danh (chỉ dành cho tác giả, có thể bỏ trống).
             * @example Pen Master
             */
            penName?: string;
            /**
             * @description Tiểu sử ngắn của người dùng (có thể bỏ trống).
             * @example Tôi là một tác giả chuyên viết tiểu thuyết.
             */
            bio?: string;
        };
        TokenResponse: {
            access_token: string;
        };
        LoginDto: {
            username: string;
            password: string;
        };
        ForgotPasswordDto: Record<string, never>;
        UpdateProfileDto: {
            /**
             * @description Họ và tên đầy đủ của người dùng.
             * @example Tô Hoài
             */
            fullName?: string;
            /** @description URL ảnh đại diện của người dùng. */
            avatarUrl?: string;
            /**
             * @description Bút danh (chỉ dành cho tác giả).
             * @example Pen Master
             */
            penName?: string;
            /**
             * @description Tiểu sử ngắn của người dùng.
             * @example Tôi là một tác giả chuyên viết tiểu thuyết.
             */
            bio?: string;
        };
        MessageResponseDto: {
            message: string;
        };
        UpdatePasswordDto: {
            /**
             * @description Mật khẩu hiện tại của người dùng.
             * @example oldPassword123
             */
            currentPassword: string;
            /**
             * @description Mật khẩu mới (ít nhất 6 ký tự).
             * @example newPassword123
             */
            newPassword: string;
            /**
             * @description Xác nhận mật khẩu mới.
             * @example newPassword123
             */
            confirmPassword: string;
        };
        CategorySerializer: {
            id: number;
            name: string;
            description: string;
        };
        TagSerializer: {
            id: number;
            name: string;
        };
        PostSerializer: {
            id: number;
            title: string;
            content: string;
            status: string;
            imageUrl: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            category: components["schemas"]["CategorySerializer"];
            tags: components["schemas"]["TagSerializer"][];
            author: components["schemas"]["AuthorSerializer"];
        };
        CreateCategoryDto: {
            id: number;
            name: string;
        };
        CreateTagDto: {
            id: number;
            name: string;
        };
        CreatePostDto: {
            title: string;
            content: string;
            imageUrl?: string;
            category: components["schemas"]["CreateCategoryDto"];
            tags: components["schemas"]["CreateTagDto"][];
        };
        UpdatePostDto: {
            title?: string;
            content?: string;
            imageUrl?: string;
            category?: components["schemas"]["CreateCategoryDto"];
            tags?: components["schemas"]["CreateTagDto"][];
        };
        ApprovalAuthorDto: {
            isApproved: string;
        };
        ApprovalPostDto: {
            /** @enum {string} */
            status: "pending" | "approved" | "rejected";
            /** @description Lý do từ chối bài viết, chỉ khi status = rejected */
            rejectionReason?: string;
        };
        FollowerSerializer: {
            id: number;
            /** Format: date-time */
            createdAt: string;
            author: components["schemas"]["AuthorSerializer"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_register_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["UserSerializer"];
                    };
                };
            };
        };
    };
    AuthController_Login_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["TokenResponse"];
                    };
                };
            };
        };
    };
    PasswordResetController_forgotPassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PasswordResetController_resetPassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_getProfile_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["UserSerializer"];
                    };
                };
            };
        };
    };
    UserController_updateProfile_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["UserSerializer"];
                    };
                };
            };
        };
    };
    UserController_changePassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["MessageResponseDto"];
                    };
                };
            };
        };
    };
    AuthorController_getAuthorInfo_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["AuthorSerializer"];
                    };
                };
            };
        };
    };
    PostController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["PostSerializer"];
                    };
                };
            };
        };
    };
    PostController_getPostsByAuthor_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["PostSerializer"][];
                    };
                };
            };
        };
    };
    PostController_softDelete_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["MessageResponseDto"];
                    };
                };
            };
        };
    };
    PostController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["PostSerializer"];
                    };
                };
            };
        };
    };
    PostController_getAllPosts_v1: {
        parameters: {
            query: {
                title: string;
                authorName: string;
                status: string;
                categoryName: string;
                tagName: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["PostSerializer"][];
                    };
                };
            };
        };
    };
    PostController_getPostDetail_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["PostSerializer"];
                    };
                };
            };
        };
    };
    CategoryController_getAllCategories_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["CategorySerializer"][];
                    };
                };
            };
        };
    };
    TagController_getAllTags_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["TagSerializer"][];
                    };
                };
            };
        };
    };
    AdminController_getPendingAuthors_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["AuthorSerializer"][];
                    };
                };
            };
        };
    };
    AdminController_updateApproval_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalAuthorDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["MessageResponseDto"];
                    };
                };
            };
        };
    };
    AdminController_approvePost_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalPostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["MessageResponseDto"];
                    };
                };
            };
        };
    };
    AdminController_getAllListAuthors_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["AuthorSerializer"][];
                    };
                };
            };
        };
    };
    AdminController_getAllPosts_v1: {
        parameters: {
            query: {
                title: string;
                authorName: string;
                status: string;
                categoryName: string;
                tagName: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["PostSerializer"][];
                    };
                };
            };
        };
    };
    FollowersController_follow_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowersController_unfollow_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                authorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["MessageResponseDto"];
                    };
                };
            };
        };
    };
    FollowersController_getFollowedAuthors_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["FollowerSerializer"][];
                    };
                };
            };
        };
    };
}
